{"remainingRequest":"/Users/mr.wu/vueProject/vue-test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mr.wu/vueProject/vue-test/src/components/draggableTest1.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mr.wu/vueProject/vue-test/src/components/draggableTest1.vue","mtime":1608638097915},{"path":"/Users/mr.wu/vueProject/vue-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mr.wu/vueProject/vue-test/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mr.wu/vueProject/vue-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mr.wu/vueProject/vue-test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport draggable from \"vuedraggable\";\nexport default {\n  components: {\n    draggable,\n  },\n  data() {\n    return {\n      collections: [{\n        id:1\n      }],\n      availableMenus: [],\n    };\n  },\n  computed: {\n    notCollectedMenus() {\n      return this.availableMenus.filter((menu) => {\n        let collection = this.collections.find(\n          (collection) => collection.menu.id === menu.id\n        );\n        return collection == undefined ? true : false;\n      });\n    },\n  },\n  methods: {\n    deleteCollection(collectionToBeDeleted) {\n      let index = this.collections.findIndex(\n        (collection) => collection.id == collectionToBeDeleted.id\n      );\n      this.collections.splice(index, 1);\n    },\n    addCollection(evt) {\n      let newCollectionIndex = evt.newIndex;\n      let menuIndex = evt.oldIndex;\n\n      let menu = this.notCollectedMenus[menuIndex];\n      let newCollection = {};\n      newCollection.menu = menu;\n      newCollection.username = this.username;\n      this.collections.splice(newCollectionIndex, 0, newCollection);\n    },\n    sortCollection(evt) {\n      let newIndex = evt.newIndex;\n      let oldIndex = evt.oldIndex;\n\n      let collection = this.collections[oldIndex];\n      this.collections.splice(oldIndex, 1);\n      this.collections.splice(newIndex, 0, collection);\n    },\n  },\n};\n",{"version":3,"sources":["draggableTest1.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"draggableTest1.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div>\n      <draggable\n        :group='{name: \"menu\", put: true}'\n        @add='addCollection'\n        @update='sortCollection'\n        :value=\"collections\"\n      >\n        <div\n          v-for='collection in collections'\n          :key='collection.id'\n        >\n          <collection-item\n            @delete='deleteCollection'\n            :deletable='modified'\n            :collection='collection'\n          ></collection-item>\n        </div>\n      </draggable>\n    </div>\n    <!-- 未收藏 -->\n    <div>\n      <draggable\n        :group='{name: \"menu\", put: false}'\n        :sort='false'\n        :value=\"notCollectedMenus\"\n      >\n        <div\n          v-for='menu in notCollectedMenus'\n          :key='menu.id'\n        >\n          <menu-item :menu='menu'></menu-item>\n        </div>\n      </draggable>\n    </div>\n  </div>\n</template>\n<script>\nimport draggable from \"vuedraggable\";\nexport default {\n  components: {\n    draggable,\n  },\n  data() {\n    return {\n      collections: [{\n        id:1\n      }],\n      availableMenus: [],\n    };\n  },\n  computed: {\n    notCollectedMenus() {\n      return this.availableMenus.filter((menu) => {\n        let collection = this.collections.find(\n          (collection) => collection.menu.id === menu.id\n        );\n        return collection == undefined ? true : false;\n      });\n    },\n  },\n  methods: {\n    deleteCollection(collectionToBeDeleted) {\n      let index = this.collections.findIndex(\n        (collection) => collection.id == collectionToBeDeleted.id\n      );\n      this.collections.splice(index, 1);\n    },\n    addCollection(evt) {\n      let newCollectionIndex = evt.newIndex;\n      let menuIndex = evt.oldIndex;\n\n      let menu = this.notCollectedMenus[menuIndex];\n      let newCollection = {};\n      newCollection.menu = menu;\n      newCollection.username = this.username;\n      this.collections.splice(newCollectionIndex, 0, newCollection);\n    },\n    sortCollection(evt) {\n      let newIndex = evt.newIndex;\n      let oldIndex = evt.oldIndex;\n\n      let collection = this.collections[oldIndex];\n      this.collections.splice(oldIndex, 1);\n      this.collections.splice(newIndex, 0, collection);\n    },\n  },\n};\n</script>"]}]}